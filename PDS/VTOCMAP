         TITLE 'VTOCMAP - VTOC MAPPING SUBROUTINE'
***********************************************************************
*        SPACE
* AUTHOR;  MATT GATES
* NUMBER    DATE    PERSON    REASON
*  000G    110883   GATES     FIRST WRITING OF CODE.
*  001G    050284   GATES     RENAME VTOCOM MACRO TO VTCCOM,
*                              RENAME VTLEAVE MACRO TO VTCLEAVE,
*                               RENAME ENTER TO VTCENTER,
*                              VTOC MORE TRANSPORTABLE.
*  002G    052384   GATES     UPGRADE LOGIC TO HANDLE DATASETS WITH
*                              MORE THAN 16 EXTENTS.
*  003G    111485   GATES     FIX BUG THAT CAUSED LOOP WHEN MESSAGE
*                              "VTOCMAP NO MORE STORAGE ...." ISSUED.
*  004G    122085   GATES     PUT CURRENT VOLID IN "VTOCMAP NO MORE
*                              STORAGE ...." MESSAGE.
*  ???G    ??????   GATES     MIGHT NEED TO CHECK REUSE OF STORAGE
*                              THAT WAS GETMAINED.
*
*
*
*
* OPERATION; THIS ROUTINE IS USED TO MAP THE DATASET LOCATIONS ON A
*        VOLUME. THE ROUTINE HAS TWO CALL MODES;
*
*        0 - OPEN WILL GET THE MEMORY NECESSARY FOR THE INTERNAL MAP
*              TABLE.
*        1 - ADD. WILL ADD THE CURRENT EXTENTS AND DSNAME TO AN
*              INTERNAL MAP TABLE. THE DSNAMES START FROM THE TOP
*              AND THE EXTENTS START FROM THE BOTTOM.
*                     RETURN CODE = 0    ALL OK
*                     RETURN CODE = 8    NOT ENOUGH STORAGE IN TABLE
*        2 - CLOSE. WILL CAUSE ALL THE ENTRIES CURRENTLY IN THE TABLE
*              TO BE PRINTED OUT. THIS SHOULD BE CALLED AT THE END
*              OF THE CURRENT VTOC.
*        3 - SORT. WILL CAUSE ALL THE ENTRIES CURRENTLY IN THE TABLE
*              TO BE SORTED ASCENDING ON START CCHH.
         SPACE
* ENTRY POINTS:  ENTRY IS ALWAYS TO 'VTOCMAP'.
*        ARGUMENTS ARE:
*                      1 - THE FORMAT1 DSCB
*                      2 - THE FORMAT3 DSCB
* EXTERNAL ROUTINES:
*
         SPACE
* EXITS - NORMAL;  RETURNS TO CALLER VIA R14 WITH RETURN
*        CODE IN REGISTER 15.       (SEE ABOVE FOR RETURN CODE VALUES.)
*
* TABLES AND WORK AREAS;  USES AN AREA PROVIDED BY THE CALLER FOR
*        ITS SAVEAREA AND FOR WORKING STORAGE IMMEDIATELY FOLLOWING
*        THE PRIOR SAVEAREA.  IT USES GETMAIN TO OBTAIN AN AREA FOR
*        THE MAP TABLE TO BE BUILT.  THIS COULD BE AS LARGE AS
*        8K FOR 3350'S.  IT IS FREED BY THE FINAL CALL.
*
* ATTRIBUTES;  REENTRANT, REFRESHABLE.
         EJECT
         MACRO
&NAME    VTCEXT1 &OPT,&NUMB
&NAME    LA    R5,&OPT
         AIF   ('&NUMB'(1,1) EQ '(').CONTA                         002G
         LA    R6,&NUMB
         AGO   .CONTB                                              002G
.CONTA   ANOP                                                      002G
         LR    R6,&NUMB                                            002G
         AGO   .CONTB                                              002G
.CONTB   ANOP                                                      002G
         BAL   R14,CNVTEXT1
         MEND
         MACRO
&NAME    VTCEXT2 &OPT,&NUMB
&NAME    LA    R5,&OPT
         AIF   ('&NUMB'(1,1) EQ '(').CONTA                         002G
         LA    R6,&NUMB
         AGO   .CONTB                                              002G
.CONTA   ANOP                                                      002G
         LR    R6,&NUMB                                            002G
         AGO   .CONTB                                              002G
.CONTB   ANOP                                                      002G
         BAL   R14,CNVTEXT2
         MEND
* ENTER HERE AND PERFORM STANDARD REGISTER SAVE AREA HOUSEKEEPING.
         SPACE
VTOCMAP  VTCENTER 12,8                 USE THE PROVIDED SAVEAREA   001G
         USING VTOCWORK,R13   SET ADDRESSABILITY FOR WORK AREA
         LR    R11,R1                  SAVE PARAMETER REGISTER
         USING VTOCOM,R11              SET ADDRESSABILITY
         SPACE
* SELECT MODE FROM CONTENTS AT ADDRESS IN REGISTER 1.
         SPACE
         SR    RWA,RWA                 CLEAR THE REGISTER
         IC    RWA,VTCMFUNC            GET CALL MODE
         SLL   RWA,2                   MODE TIMES 4
         B     *+4(RWA)                BRANCH ON MODE
         SPACE
         B     OPENRTN                 MODE 0, GET MEMORY
*                                              OPEN MAP TABLE.
         B     ADDRTN                  MODE 1, ADD MAP ENTRY.
         B     CLOSRTN                 MODE 2, CLOSE MAP TABLE
*                                              FREE MEMORY.
         B     SORTRTN                 MODE 3, SORT TABLE ENTRIES.
         SPACE 3
***********
* RETURNS *
***********
         SPACE
RETURN0  SR    R15,R15                 CLEAR THE RETURN CODE
RETURN   VTCLEAVE EQ                   EXIT W/CURRENT RET CODE.    001G
         EJECT
*************************************************
* MODE 0 - OPEN, GETMAIN THE INTERNAL MAP TABLE *
*************************************************
         SPACE
*   SAVE AREA HAS DSN'S SAVED AT THE TOP GOING DOWN AND THE
*    EXTENT INFO SAVED AT THE BOTTOM GOING UP.
*
OPENRTN  EQU   *
         GETMAIN R,LV=VTCMPGET
         ST    R1,VTCMPEXT    SAVE A(AREA FOR EXTENT SAVE).
         ST    R1,VTCMPMEM    SAVE A(BEGINNING OF MAP AREA).
         MVI   0(R1),X'FF'    INDICATE END OF EXTENTS INFO.
         CNOP  0,4            ALIGN FOR BAL IF NECESSARY.
         BAL   R2,GOTMAIN     GET L(GETMAINED AREA).
         DC    A(VTCMPGET)    GET L(GETMAINED AREA).
GOTMAIN  L     R2,0(R2)       GET L(GETMAINED AREA).
         AR    R1,R2          CALC END OF GETMAINED AREA.
         ST    R1,VTCMPDSN    SAVE A(AREA FOR DSNAME SAVE).
         B     RETURN0        THEN RETURN
         EJECT
**************************
* MODE 1 - ADD MAP ENTRY *
**************************
         SPACE
ADDRTN   EQU   *
         L     R2,DSCBADDR             GET A(FMT1 DSCB).
         LA    R2,8(R2)                BUMP PAST HEADER.
         USING FMT1DSEC,R2             TELL ASSEMBLER
         L     R3,VTCMPDSN             GET A(PREV DSN SAVED).
         SH    R3,=H'44'               CALC THIS DSN SAVE AREA.
         MVC   0(44,R3),DS1DSNAM       MOVE DSN TO SAVE AREA
         ST    R3,VTCMPDSN              AND SAVE ADDR.
         CLI   DS1FMTID,C'4'           IS IT THE VTOC AREA?
         BNE   NOTVTOC                 NO, TRY NEXT.
         VTCEXT1 DS1EXT1,1             CONVERT THE VTOC EXTENT.
         LTR   R15,R15                 WAS CONVERSION OK?
         BNZ   RETURN                  NO, QUIT AND PASS BACK ERROR.
         B     ENDEXT                  ONLY 1, QUIT.
NOTVTOC  CLI   DS1FMTID,C'5'           IS IT THE FREE SPACE?
         BNE   NOTFREE                 NO, TRY NEXT.
         DROP  R2
         USING FMT5DSEC,R2             TELL ASSEMBLER
         SR    R7,R7                   CLEAR EXTENT COUNT.
         VTCEXT2 DS5AVEXT,8            CONVERT FIRST 8 EXTENTS.
         LTR   R15,R15                 WAS CONVERSION OK?
         BNZ   RETURN                  NO, QUIT AND PASS BACK ERROR.
         VTCEXT2 DS5MAVET,18           CONVERT LAST 18 EXTENTS.
         LTR   R15,R15                 WAS CONVERSION OK?
         BNZ   RETURN                  NO, QUIT AND PASS BACK ERROR.
         B     ENDEXT                  GOT ALL GOOD EXTENTS.
NOTFREE  EQU   *
         DROP  R2
         USING FMT1DSEC,R2             TELL ASSEMBLER
         CLI   DS1FMTID,C'6'           IS IT THE SPLIT AREA?
         BNE   ITSAFMT1                NO, TRY NEXT.
         DROP  R2
         USING FMT6DSEC,R2             TELL ASSEMBLER
         VTCEXT2 DS6EXTAV,7            CONVERT FIRST 7 EXTENTS.
         LTR   R15,R15                 WAS CONVERSION OK?
         BNZ   RETURN                  NO, QUIT AND PASS BACK ERROR.
         VTCEXT2 DS6MAVET,18           CONVERT LAST 18 EXTENTS.
         LTR   R15,R15                 WAS CONVERSION OK?
         BNZ   RETURN                  NO, QUIT AND PASS BACK ERROR.
         B     ENDEXT                  ONLY 1, QUIT.
ITSAFMT1 EQU   *
         DROP  R2
         USING FMT1DSEC,R2             TELL ASSEMBLER
         VTCEXT1 DS1EXT1,3             CONVERT FIRST 3 EXTENTS.
         LTR   R15,R15                 WAS CONVERSION OK?
         BNZ   RETURN                  NO, QUIT AND PASS BACK ERROR.
*        CLC   DS1PTRDS,=5X'00'        IS THERE A FORMAT 3?        002G
*        BE    ENDEXT                  NO, SKIP CONVERTING OTHERS. 002G
*        VTCEXT1 DS3EXTNT,4            CONVERT NEXT 4 EXTENTS.     002G
*        LTR   R15,R15                 WAS CONVERSION OK?          002G
*        BNZ   RETURN                  NO, QUIT AND PASS BACK ERROR002G
*        VTCEXT1 DS3ADEXT,9            CONVERT NEXT 9 EXTENTS.     002G
         XR    R6,R6                   CLEAR WORK REG.             002G
         ICM   R6,X'0001',DS1NOEPV     GET NUMBER OF EXTENTS.      002G
         CH    R6,=H'3'                IS THERE MORE THAN 3 EXTENTS002G
         BNH   RETURN0                 NO, FMT 1 WAS ENOUGH.       002G
         SH    R6,=H'3'                YES, SUBT ONES IN FMT1.     002G
         LA    R15,8                   SET ERROR RET CODE IN CASE. 002G
         BM    RETURN                  THIS SHOULDN'T HAPPEN.      002G
         VTCEXT1 FMT3,(R6)             CONVERT REST OF EXTENTS.    002G
         LTR   R15,R15                 WAS CONVERSION OK?
         BNZ   RETURN                  NO, QUIT AND PASS BACK ERROR.
ENDEXT   B     RETURN0
         EJECT
******************
* MODE 2 - CLOSE *
******************
         SPACE
CLOSRTN  EQU   *
         L     R1,VTCMPMEM    GET A(GOTMAINED AREA).
FREEMAIN FREEMAIN R,LV=VTCMPGET,A=(1)
         B     RETURN0        THEN RETURN
*
ERRET    LA    R15,8          SET AN ERROR RETURN CODE
         B     RETURN         THEN EXIT
*
         EJECT
********************
* SERVICE ROUTINES *
********************
         SPACE
***************************************************************
* ROUTINES TO CONVERT EXTENTS TO TRACKS AND SAVE IN TRACK MAP *
*    CNVTEXT1 IS FOR FMT1, FMT3, AND FMT4 DSCBS               *
*    CNVTEXT2 IS FOR FMT5 AND FMT6 DSCBS                      *
*    INPUTS:  R5=A(EXT INFO TO BE CONVERTED)                  *
*             R6=NUMBER OF EXTENTS THIS TIME THRU             *
***************************************************************
         SPACE
CNVTEXT1 L     R4,VTCMPEXT             WHERE TO SAVE EXTENT INFO.
         MVI   0(R4),X'FF'             INDICATE END OF EXT INFO.
         USING OEXTDSEC,R4             TELL ASSEMBLER.
         USING IEXTDS1,R5              TELL ASSEMBLER.
CNVTNXT1 CLI   0(R5),X'00'             DOES EXTENT DESCRIBE ANYTHING?
         BE    NEXTEXT1                NO, CHECK NEXT EXTENT.
         ST    R3,OEXTADSN             SAVE A(ASSOCIATED DSN ENTRY).
         MVC   OEXTNUMB(1),IEXTNUMB    MOVE EXTENT NUMBER.
         MVC   DOUBLE(2),IEXTSTRT      LOW LIM. OF EXT., CC OF CCHH
         LH    R9,DOUBLE
         MH    R9,DS4DEVSZ+2           CONVERT CC TO ACTUAL TRACK NO.
         MVC   DOUBLE(2),IEXTSTRT+2    LOW LIM. OF EXT., HH OF CCHH
         AH    R9,DOUBLE               ACTUAL TRK OF START OF EXTENT
         STH   R9,OEXTSTRT             SAVE IT.
         MVC   DOUBLE(2),IEXTEND       UPR LIM. OF EXT., CC OF CCHH
         LH    R8,DOUBLE
         MH    R8,DS4DEVSZ+2           CONVERT CC TO ACTUAL TRACK NO.
         MVC   DOUBLE(2),IEXTEND+2     UPR LIM. OF EXT., HH OF CCHH
         AH    R8,DOUBLE               ACTUAL TRK OF END OF EXTENT
         STH   R8,OEXTEND              SAVE IT.
         SR    R8,R9                   CALC L(EXTENT) IN TRKS.
         LA    R8,1(R8)                ALWAYS ONE LESS THAN ACTUAL.
         STH   R8,OEXTLEN              SAVE IT.
         MVI   OEXTL(R4),X'FF'         INDICATE END OF EXTENT INFO.
         LA    R4,OEXTL(R4)            UPDATE POINTER TO NEXT OUT EXT.
NEXTEXT1 LA    R5,IEXTL1(R5)           UPDATE POINTER TO NEXT IN EXT.
         LR    R8,R3                   DONT KILL R3.
         SR    R8,R4                   DID TOP AND BOTTOM MEET YET?
         BM    ERRSTOR                 YES, ERROR NO STORAGE LEFT.
         BCT   R6,CNVTNXT1             CONVERT NUMB EXTENTS REQUESTED
         ST    R4,VTCMPEXT             SAVE A(NEXT EXT SAVE AREA).
         SR    R15,R15                 ZERO RETURN CODE.
         BR    R14
         SPACE
CNVTEXT2 L     R4,VTCMPEXT             WHERE TO SAVE EXTENT INFO.
         MVI   0(R4),X'FF'             INDICATE END OF EXT INFO.
         USING OEXTDSEC,R4             TELL ASSEMBLER.
         USING IEXTDS2,R5              TELL ASSEMBLER.
CNVTNXT2 CLC   IEXTRTRK(2),=H'0'       DOES EXTENT DESCRIBE ANYTHING?
         BE    CNVTRET2                NO, SKIP THIS DSCB.
         ST    R3,OEXTADSN             SAVE A(ASSOCIATED DSN ENTRY).
         STC   R7,OEXTNUMB             SAVE EXTENT NUMBER.
         MVC   DOUBLE(2),IEXTRTRK      GET ACTUAL TRK START OF EXT.
         LH    R9,DOUBLE
         STH   R9,OEXTSTRT             SAVE ACTUAL TRK START OF EXT.
         MVC   DOUBLE(2),IEXTCYL       GET NUMBER OF CYLS.
         LH    R8,DOUBLE
         MH    R8,DS4DEVSZ+2           CONVERT CC TO NUMBER TRKS.
         CLI   DS1FMTID,C'6'           IS IT A FORMAT6?
         BE    CNVTF62                 YES, NO TRKS INFO.
         MVI   DOUBLE,0                CLEAR FIRST BYTE FOR ADD.
         MVC   DOUBLE+1(1),IEXTTRK     GET REST OF TRKS.
         AH    R8,DOUBLE               ADD IN REST OF TRKS.
CNVTF62  STH   R8,OEXTLEN              SAVE L(EXTENT IN TRKS).
         AR    R8,R9                   CALC ACTUAL TRK END OF EXTENT.
         BCTR  R8,0                    SUBT ONE.
         STH   R8,OEXTEND              SAVE IT.
         MVI   OEXTL(R4),X'FF'         INDICATE END OF EXTENT INFO.
         LA    R4,OEXTL(R4)            UPDATE POINTER TO NEXT OUT EXT.
NEXTEXT2 LA    R5,IEXTL2(R5)           UPDATE POINTER TO NEXT IN EXT.
         LR    R8,R3                   DONT KILL R3.
         SR    R8,R4                   DID TOP AND BOTTOM MEET YET?
         BM    ERRSTOR                 YES, ERROR NO STORAGE LEFT.
         LA    R7,1(R7)                BUMP EXTENT NUMBER.
         BCT   R6,CNVTNXT2             CONVERT NUMB EXTENTS REQUESTED
CNVTRET2 ST    R4,VTCMPEXT             SAVE A(NEXT EXT SAVE AREA).
         SR    R15,R15                 ZERO RETURN CODE.
         BR    R14
*ERRSTOR  VTOCMSG NOSTORM               PUT MESSAGE OUT.           004G
ERRSTOR  MVC   MSGTEXT2,NOSTORM        SET UP THE MESSAGE.         004G
         MVC   MSGTEXT2+65(6),VOLSER   AND ADD THE VOLSER.         004G
         VTOCMSG MSGTEXT2              PUT MESSAGE OUT.            004G
         LA    R15,8                   SET AN ERROR RETURN CODE.
*        BR    R14                                                 003G
         B     RETURN                                              003G
         SPACE
**************************************************
* MODE 3 - SORT THE EXTENTS INTO ASCENDING ORDER *
**************************************************
         SPACE
SORTRTN  EQU   *
*
*        ALL SORTING IS ON STARTING CCHH OF EXTENTS
*
         L     R4,VTCMPMEM         GET A(FIRST ENTRY).
         CLI   00(R4),X'FF'        IS THIS THE LAST ENTRY?
         BE    SORTEND             YES, QUIT.
         NI    VTCMFUNC,X'7F'      INDICATE LIST NOT REARRANGED.
SORTIT   CLI   12(R4),X'FF'        IS THIS THE LAST ENTRY?
         BE    SORTLAST            YES, SEE IF MORE SORT NEEDED.
         CLC   6(2,R4),18(R4)      COMPARE CURRENT VS NEXT ENTRY.
         BE    SORTNEXT              START CCHH SAME COMPARE NEXT.
         BL    SORTNEXT              CURR START CCHH LOW COMPARE NEXT.
*                                    CURR START CCHH HIGH EXCHANGE THEM
         XC    0(12,R4),12(R4)           EXCHANGE
         XC    12(12,R4),0(R4)           EXCHANGE
         XC    0(12,R4),12(R4)           EXCHANGE
         OI    VTCMFUNC,X'80'      INDICATE LIST REARRANGED THIS PASS.
SORTNEXT LA    R4,12(R4)           MAKE NEXT ENTRY CURRENT ENTRY.
         B     SORTIT              THEN CONTINUE SORTING LIST.
SORTLAST TM    VTCMFUNC,X'80'      WAS THE LIST REARRANGED THIS PASS?
         BNO   SORTEND             NO, WE ARE FINISHED SORTING.
         B     SORTRTN             GO TO START SORT FROM BEGINNING.
SORTEND  B     RETURN0             RETURN TO CALLER.
         EJECT
********************************
* CONSTANTS, VARIABLES, ETC... *
********************************
         SPACE
*        ERROR MESSAGES
*
*NOSTORM  VTCMSG ' VTOCMAP - NO MORE STORAGE TO SORT EXTENTS QUITTING'
NOSTORM  VTCMSG ' VTOCMAP - NO MORE STORAGE TO SORT EXTENTS QUITTING DUX
               RING VOLUME VVVVVV  '                              004G
         LTORG
         EJECT
* SECTION DEFINITION AND REGISTER ASSIGNMENTS;
         SPACE 2
RWA      EQU   2
RWB      EQU   3
RWC      EQU   4
RDCB     EQU   8              DCB POINTER
RRCODE   EQU   10              RETURN CODE REGISTER
RRET     EQU   9               LOCAL SUBROUTINE EXIT REGISTER
         SPACE 3
         EJECT
         SPACE 2
         VTCCOM                                                    001G
         SPACE 2
*
*        AREA USED BY VTOCREAD, PASSED VIA R13
*
VTOCWORK DSECT
         DS    18F             SAVE AREA
         SPACE
MAPSAVE  DS    18F             INTERNAL SAVE AREA
VTOCWLEN EQU   *-VTOCWORK
IEXTDS1  DSECT
         DS    X               EXTENT TYPE
IEXTNUMB DS    X               EXTENT NUMBER
IEXTSTRT DS    4X              CCHH START
IEXTEND  DS    4X              CCHH END
IEXTL1   EQU   *-IEXTDS1
IEXTDS2  DSECT
IEXTRTRK DS    2X              RELATIVE TRK OF START
IEXTCYL  DS    2X              NUMBER OF CYLS
IEXTTRK  DS    0X              NUMBER OF TRKS
IEXTDSS  DS    1X              NUMBER OF DSN SHARING SPACE
IEXTL2   EQU   *-IEXTDS2
OEXTDSEC DSECT
         DS    0F
OEXTADSN DS    AL4             A(ASSOCIATED DSN ENTRY IN MAP TABLE)
         DS    X               FILLER
OEXTNUMB DS    X               EXTENT NUMBER
OEXTSTRT DS    2X              CCHH START
OEXTEND  DS    2X              CCHH END
OEXTLEN  DS    2X              EXTENT LENGTH
OEXTL    EQU   *-OEXTDSEC
FMT1DSEC DSECT
         IECSDSL1 (1)
FMT5DSEC DSECT
         IECSDSL1 (5)
FMT6DSEC DSECT
         IECSDSL1 (6)
         END
