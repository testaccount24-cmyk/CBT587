         TITLE 'VTOCEXCP- VTOC READING SUBROUTINE'
***********************************************************************
*        SPACE
* AUTHOR;  R. F. MORSE, MIT INSTRUMENTATION LABORATORY  AUG 5,1968.
* MODIFIED;   E.BANK, FIREMAN'S FUND  MAY 15,1975.
* MODIFIED;   R.MILLER  FIREMAN'S FUND  MAR 20,1977.
* MODIFICATIONS
* NUMBER    DATE    PERSON    REASON
*  001K    072178   KOUBA     LINE 5117000 CHANGED TO UNIT=SYSALLDA
*                              TO ALLOW ACCESS TO OUR PRODUCTION PACKS.
*  002G    072278   GATES     CHANGE MSG MACROS TO VTCMSG TO AVOID
*                              CONFLICT WITH EXISTING MSG MACRO.
*  003G    012082   GATES     FIX DYNAMIC ALLOCATION RETURN CODE SAVE,
*                              WAS GIVING ERRONEOUS DYNAMIC ALLOC RET
*                              CODE.
*  004G    111883   GATES     PUT VOLID IN ERROR MESSAGES.
*  005G    112983   GATES     IF ADDR IS ZEROS ASSUME 3330V UNIT TYPE.
*  006G    120283   GATES     IF ADDR IS NON ZEROS USE ADDRESS INSTEAD
*                              OF SYSALLDA UNIT NAME.
*  007G    120283   GATES     PUT VOLID IN TRACKERR MESSAGE.
*  008G    050284   GATES     RENAME VTOCOM MACRO TO VTCCOM,
*                              RENAME VTLEAVE MACRO TO VTCLEAVE,
*                              RENAME ENTER TO VTCENTER,
*                              RENAME ALLOC TO VTCALLOC,
*                              RENAME FREE TO VTCFREE,
*                              RENAME DYNSPACE TO VTCDYNSP,
*                              RENAME S99FAIL TO VTCS99NG,
*                              VTOC MORE TRANSPORTABLE.
*  009G    050384   GATES     EMBED THE FOLLOWING MACROS TO MAKE
*                              VTOC MORE TRANSPORTABLE:
*                              RCPDSN,RCPDDNRT,RCPUNIT,RCPDISP,
*                              RCPSR2,RCPDDN,RCPUNALC,RCPDINC,
*                              RCPVCHAR, RCPFDDN,
*                              RCPTUBFR, AND RCPBTU.
*
*
* FUNCTION; THIS SUBROUTINE READS THE VOLUME TABLE OF CONTENTS (VTOC)
*        FROM A DIRECT-ACCESS DEVICE AND PRESENTS IT TO THE CALLER
*        ONE RECORD (DSCB) AT A TIME.
*
* OPERATION; THIS ROUTINE IS A SPECIALIZED SEQUENTIAL ACCESS METHOD
*        FOR VTOC'S.  ITS ADVANTAGE OVER ORDINARY BSAM IS THAT IT READS
*        AN ENTIRE TRACK IN ONE REVOLUTION, THUS SAVING CONSIDERABLE
*        TIME.  THE ROUTINE HAS THREE CALL MODES;
*
*        0 - READ.  RETURNS WITH THE CORE ADDRESS OF A DSCB IN THE 3RD
*              PARAMETER.  THE CORE CONSISTS OF 148 CONSECUTIVE BYTES,
*              CONTAINING THE COUNT (8 BYTES), KEY (44 BYTES), AND DATA
*              (96 BYTES) FOR ONE DSCB.  RETURN CODES (REGISTER 15)
*              ARE;
*                      0 - NORMAL;
*                      4 - END OF FILE, NO DATA PRESENTED;
*                      8 - PERMANENT I/O ERROR.  THE KEY AND DATA AREAS
*                          WILL BE SET TO ZEROS; THE COUNT AREA WILL
*                          CONTAIN THE CORRECT CCHHR.  SINCE READING
*                          IS DONE A TRACK AT A TIME, ALL THE DSCB'S
*                          FOR THAT TRACK WILL BE MARKED IN ERROR.
*                          READING MAY CONTINUE ON TO THE NEXT TRACK.
*
*        1 - OPEN.  THE SECOND PARAMETER SHOULD POINT TO
*              A  6-BYTE FIELD CONTAINING THE VOLSER TO BE USED FOR THE
*              ALLOCATION.
*              RETURN CODES ( REG 15 )  ARE DIRECT FROM DYNAMIC ALLOC.
*                      0 - NORMAL;
*                      4 - UNABLE TO OPEN (PROBABLY MISSING DD CARD);
*                      8 - DD CARD DID NOT REFER TO A DIRECT-ACCESS
*                          DEVICE, OR DEVICE TYPE UNKNOWN.
*
*        2 - CLOSE.  NO ARGUMENTS ARE REQUIRED OR RETURNED.  RETURN
*              CODE ( REG 15 ) IS FROM DYNAMIC UNALLOCATION.
         SPACE
* ENTRY POINTS:  ENTRY IS ALWAYS TO 'VTOCEXCP'.
*        ARGUMENTS ARE:
*                      1 - A(FULL-WORD BINARY ENTRY TYPE);
*                      2 - A(PTR FOR DSCB);
*                      3 - A(VOLSER).
* DATA SETS:  READS VOLUME TABLE OF CONTENTS FROM ANY DIRECT-ACCESS
*        DEVICE.  USES EXCP TO EXECUTE A CHAINED CHANNEL PROGRAM TO
*        READ AN ENTIRE TRACK AT A TIME.
*
* EXTERNAL ROUTINES:  USES SUPERVISOR ROUTINE 'IECPCNVT' TO CONVERT
*        A RELATIVE TRACK NUMBER TO AN ABSOLUTE ADDRESS.
         SPACE
* EXITS - NORMAL;  RETURNS TO CALLER VIA R14 WITH RETURN
*        CODE IN REGISTER 15.       (SEE ABOVE FOR RETURN CODE VALUES.)
*
* TABLES AND WORK AREAS;  USES AN AREA PROVIDED BY THE CALLER FOR
*        ITS SAVEAREA AND FOR WORKING STORAGE IMMEDIATELY FOLLOWING
*        THE PRIOR SAVEAREA.  IT USES GETMAIN TO OBTAIN AN AREA FOR
*        THE DSCB'S TO BE READ INTO.  THIS COULD BE AS LARGE AS
*        8K FOR 3350'S.  IT IS FREED BY THE FINAL CALL.
*
* ATTRIBUTES;  REENTRANT, REFRESHABLE.
         EJECT
         MACRO
         RCPDSN &DSN,&MEM
         LCLC  &MEMBER
         GBLC  &DYNP
         SPACE
***********************************************************************
**   BUILD THE DSNAME TEXT UNIT                                      **
***********************************************************************
         AIF   ('&DSN'(1,1) EQ '''').Q
         AIF   ('&DSN'(K'&DSN,1) EQ '/').BD
         AIF   ('&DSN'(1,1) EQ '(').REG
         AIF   ('&DSN'  EQ '*').TERM
         RCPSR2
         L     R14,&DSN                LOAD ADDRESS OF DSNAME
         LH    R2,&DSN+4               LOAD LENGTH OF DSNAME
.STH     STH   R2,S99TULNG             STORE DSNAME LENGTH
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE DSNAME
         MVI   S99TUKEY+1,DALDSNAM     MOVE IN DSNAME KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         RCPDINC 50
         AGO   .TMEMBER
.REG     L     R14,0&DSN               LOAD ADDRESS OF DSNAME
         RCPSR2
         LH    R2,4&DSN                LOAD LENGTH OF DSNAME
         AGO   .STH
.TERM    MVI   S99TUKEY+1,DALTERM
         RCPDINC 4
         MEXIT
.BD      RCPTUBFR DALDSNAM,50,&DSN
         AGO   .TMEMBER
.Q       RCPBTU DALDSNAM,1,&DSN
.TMEMBER AIF   ('&MEM' EQ '').EXIT
         SPACE
***********************************************************************
**   BUILD THE MEMBER NAME TEXT UNIT                                 **
***********************************************************************
&MEMBER  SETC  '&MEM'
         AIF   ('&MEM' NE '*').MOK
         AIF   ('&DSN'(1,1) NE '''').MAST
         MNOTE 8,'MEMBER=* INVALID WITH QUOTED DSNAME'
         MEXIT
.MAST    ANOP
&MEMBER  SETC  '8+&DSN'
.MOK     ANOP
         AIF   ('&MEMBER'(K'&MEMBER,1) EQ '/').BM
         RCPSR2
         AIF   ('&MEMBER'(1,1) EQ '(').RM
         LH    R2,4+&MEMBER            LOAD LENGTH OF MEMBER NAME
         LTR   R2,R2                   TEST FOR ZERO
         BZ    *+30                    IF NO MEMBER, SKIP
         L     R14,&MEMBER             LOAD ADDRESS OF MEMBER
         AGO   .STHM
.RM      LH    R2,4&MEMBER             LOAD LENGTH OF MEMBER
         LTR   R2,R2                   AND TEST FOR ZERO
         BZ    *+30                    IF NO MEMBER, SKIP
         L     R14,0&MEMBER            LOAD ADDRESS OF MEMBER
.STHM    STH   R2,S99TULNG             STORE LENGTH OF MEMBER
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE IN MEMBER NAME
         MVI   S99TUKEY+1,DALMEMBR     MOVE IN MEMBER KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         RCPDINC 14
         MEXIT
.BM      RCPTUBFR DALMEMBR,14,&MEMBER
         MEXIT
.QM      RCPBTU DALMEMBR,1,&MEMBER
.EXIT    MEND
         MACRO
         RCPDDNRT
         SPACE 1
***********************************************************************
**    DDNAME RETURN TEXT UNIT                                        **
***********************************************************************
         MVI   S99TUKEY+1,DALRTDDN     SET RETURN DDNAME KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,8            SET LENGTH FIELD
         MVC   S99TUPAR(8),=CL8' '     INITIALIZE FIELD TO BLANKS
         RCPDINC 14
         MEND
         MACRO
         RCPUNIT &U,&V
         GBLC  &DYNP
         AIF   ('&U' EQ '').TVOL
         SPACE 1
***********************************************************************
**       UNIT NAME TEXT UNIT                                         **
***********************************************************************
         RCPVCHAR DALUNIT,14,&U
.TVOL    AIF   ('&V' EQ '').EXIT
         SPACE 1
***********************************************************************
**       VOLUME SERIAL TEXT UNIT                                     **
***********************************************************************
         RCPVCHAR DALVLSER,14,&V
.EXIT    MEND
         MACRO
         RCPDISP &DISP
         LCLA  &I
         LCLB  &B(4)
         AIF   ('&DISP(1)' EQ '').TD2
         SPACE
***********************************************************************
**     DATA SET INITIAL STATUS                                       **
***********************************************************************
&B(1)    SETB  ('&DISP(1)' EQ 'SHR')
&B(2)    SETB  ('&DISP(1)' EQ 'NEW')
&B(3)    SETB  ('&DISP(1)' EQ 'MOD')
&B(4)    SETB  ('&DISP(1)' EQ 'OLD')
         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK1
         MNOTE 8,'&DISP(1) IS INVALID, DISP=SHR USED'
&B(1)    SETB  1
.OK1     ANOP
&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)
         MVC   S99TUKEY(8),=Y(DALSTATS,1,1,X'0&I.00')
         RCPDINC 8
.TD2     AIF   ('&DISP(2)' EQ '').TD3
         SPACE
***********************************************************************
**    DATA SET NORMAL DISPOSITION                                    **
***********************************************************************
&B(1)    SETB  ('&DISP(2)' EQ 'KEEP')
&B(2)    SETB  ('&DISP(2)' EQ 'DELETE')
&B(3)    SETB  ('&DISP(2)' EQ 'CATLG')
&B(4)    SETB  ('&DISP(2)' EQ 'UNCATLG')
         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK2
         MNOTE 8,'&DISP(2) IS INVALID, DISP=(,KEEP) USED'
&B(1)    SETB  1
.OK2     ANOP
&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)
         MVC   S99TUKEY(8),=Y(DALNDISP,1,1,X'0&I.00')
         RCPDINC 8
.TD3     AIF   ('&DISP(3)' EQ '').EXIT
         SPACE
***********************************************************************
**   DATASET CONDITIONAL DISPOSITION                                 **
***********************************************************************
&B(1)    SETB  ('&DISP(3)' EQ 'KEEP')
&B(2)    SETB  ('&DISP(3)' EQ 'DELETE')
&B(3)    SETB  ('&DISP(3)' EQ 'CATLG')
&B(4)    SETB  ('&DISP(3)' EQ 'UNCATLG')
         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK3
         MNOTE 8,'&DISP(3) IS INVALID, DISP=(,,KEEP) USED'
&B(1)    SETB  1
.OK3     ANOP
&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)
         MVI   S99TUKEY(8),=Y(DALCDISP,1,1,X'0&I.00')
         RCPDINC 8
.EXIT    MEND
         MACRO
         RCPSR2 &A
         GBLB  &RCPSR2
         GBLC  &DYNP
         LCLC  &C
.*   TO SAVE REG 2 IN REG 0 FOR ALLOC INNER MACROS FIRST TIME ONLY
.*    IF OPERAND SUPPLIED AND SAVE DONE, RESTORES REG 2 AND
.*    GENERATES MOVE INSTRUCTION FOR EXECUTE
         AIF   ('&A' NE '').UNSAVE
         AIF   (&RCPSR2).EXIT
&RCPSR2  SETB  1
         LR    R0,R2                   SAVE CONTENTS OF REGISTER 2
         MEXIT
.UNSAVE  AIF   (NOT &RCPSR2).EXIT
         B     *+10                    SKIP NEXT INSTRUCTION
&C       SETC  '&DYNP.MVC'
&C       MVC   S99TUPAR(0),0(R14)      EXECUTED MOVE
         LR    R2,R0                   RESTORE CONTENTS OF REGISTER 2
&RCPSR2  SETB  0
.EXIT    MEND
         MACRO
         RCPDDN &DDN
         GBLC  &DYNP
         SPACE 1
***********************************************************************
**   BUILD THE DDNAME TEXT UNIT                                      **
***********************************************************************
         AIF   ('&DDN'(K'&DDN,1) EQ '/').BTU
         AIF   ('&DDN'(1,1) EQ '''').Q
         RCPSR2
         AIF   ('&DDN'(1,1) EQ '(').R
         L     R14,&DDN                LOAD ADDRESS OF DDNAME
         LH    R2,&DDN+4               LOAD LENGTH OF DDNAME
         AGO   .STH
.R       L     R14,0&DDN               LOAD ADDRESS OF DDNAME
         LH    R2,4&DDN                LOAD LENGTH OF DDNAME
.STH     STH   R2,S99TULNG             STORE DDNAME LENGTH
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE DDNAME
         MVI   S99TUKEY+1,DALDDNAM     MOVE IN DDNAME KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         RCPDINC 14
         MEXIT
.Q       RCPBTU DALDDNAM,1,&DDN
         MEXIT
.BTU     RCPTUBFR DALDDNAM,14,&DDN
         MEND
         MACRO
         RCPUNALC
         SPACE 1
***********************************************************************
**     FREE EVEN IF PERMANENTLY ALLOCATED                            **
***********************************************************************
         MVI   S99TUKEY+1,DUNUNALC     SET TEXT UNIT KEY
         RCPDINC  4
         MEND
         MACRO
         RCPDINC &L1
         GBLA  &DTUO,&DTUPO
         GBLC  &DYNP
         AIF   ('&L1' EQ '').T2
         ST    R15,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS
         LA    R15,&L1.(R15)           BUMP TEXT UNIT PTR TO NEXT SLOT
&DTUPO   SETA  &DTUPO+4
&DTUO    SETA  &DTUO+&L1
         MEXIT
.T2      ST    R14,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS
&DTUPO   SETA  &DTUPO+4
         MEND
         MACRO  - BUILD TEXT UNIT FROM BUFFER
         RCPTUBFR &KEY,                TEXT UNIT KEY                   X
               &L,                     MAXIMUM LENGTH VALUE            X
               &C,                     TEXT UNIT                       X
               &N=1                    TEXT UNIT NUMBER
         GBLC  &EXECNAM
         LCLC  &C1,&C2
         LCLA  &I,&K
         MVI   S99TUKEY+1,&KEY         SET TEXT UNIT KEY
         AIF   ('&N' EQ '' OR '&N' EQ '1').N1
         LA    R14,&N                  LOAD TEXT UNIT NUMBER
         STH   R14,S99TUNUM             AND STORE INTO TEXT UNIT
         AGO   .ENDN
.N1      MVI   S99TUNUM+1,1            SET TEXT UNIT NUMBER
.ENDN    ANOP
&K       SETA  K'&C
&I       SETA  &K-1
.LOOP1   ANOP
&K       SETA  &K-1
         AIF   (&K LE 0).STD
         AIF   ('&C'(&K,1) NE '/').LOOP1
&C2      SETC  '&C'(&K+1,&I-&K)
&C1      SETC  '&C'(1,&K-1)
         AIF   ('&C1'(1,1) NE '(').TC2
&C1      SETC  '0&C1'
.TC2     AIF   ('&C2' EQ '0000').V2B
         AIF   ('&C2' EQ '00').V1B
         AIF   ('&C2' EQ '0').V0B
         AIF   ('&C2'(1,1) EQ '(').RL
         MVI   S99TULNG+1,&C2          SET LENGTH FIELD
         MVC   S99TUPAR(&C2.),&C1      MOVE IN TEXT UNIT
         RCPDINC &L
         MEXIT
.STD     ANOP
&K       SETA  &L-6
         MVI   S99TULNG+1,&K           SET TEXT UNIT LENGTH
&C1      SETC  '&C'(1,&I)              REMOVE TRAILING SLASH
         MVC   S99TUPAR(&K),&C1        MOVE IN TEXT UNIT
         RCPDINC &L
         MEXIT
.V2B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH
         S     R14,=A(4)               EXCLUDE LENGTH OF HEADER
&C1      SETC  '4+&C1'
         AGO   .MOVE
.V1B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH
&C1      SETC  '2+&C1'
         AGO   .MOVE
.V0B     SLR   R14,R14                 CLEAR FOR IC
         IC    R14,&C1                 INSERT TEXT UNIT LENGTH
&C1      SETC  '1+&C1'
         AGO   .MOVE
.RL      ANOP
&C2      SETC  '&C2'(2,K'&C2-2)
         LR    R14,&C2                 LOAD TEXT UNIT LENGTH
.MOVE    STH   R14,S99TULNG             AND STORE INTO LENGTH FIELD
         BCTR  R14,0                   GET MACHINE LENGTH
         EXECUTE ,MVC,S99TUPAR-S99TUNIT(0,R15),&C1
         EX    R14,&EXECNAM            MOVE IN TEXT UNIT
         RCPDINC &L
         MEND
         MACRO
         RCPBTU &KEY,&NUM,&PAR
         LCLA  &L
.*
.*  INNER MACRO FOR ALLOC, TO GENERATE TEXT UNITS ENTERED
.*  IN QUOTES
.*
&L       SETA  K'&PAR-2                GET LENGTH OF TEXT UNIT
         MVI   S99TUKEY+1,&KEY         SET TEXT UNIT KEY
         MVI   S99TUNUM+1,&NUM         SET NUMBER FIELD
         MVI   S99TULNG+1,&L           MOVE IN LENGTH
         MVC   S99TUPAR(&L.),=C&PAR    MOVE IN TEXT UNIT
&L       SETA  &L+6
         AIF   (&L/2 EQ (&L+1)/2).LOK
&L       SETA  &L+1
.LOK     RCPDINC &L
         MEND
         MACRO
         RCPVCHAR &KEY,&LEN,&C,&N=1
         GBLC  &DYNP
         AIF   ('&C'(K'&C,1) EQ '/').BM
         AIF   ('&C'(1,1) EQ '''').QM
         RCPSR2
         AIF   ('&C'(1,1) EQ '(').RM
         LH    R2,&C+4                 LOAD LENGTH OF TEXT UNIT
         LTR   R2,R2                   TEST FOR ZERO
         BZ    *+30                    IF NO TEXT UNIT, SKIP
         L     R14,&C                  LOAD ADDRESS OF TEXT UNIT
         AGO   .STHM
.RM      LH    R2,4&C                  LOAD LENGTH OF TEXT UNIT
         LTR   R2,R2                   AND TEST FOR ZERO
         BZ    *+30                    IF NO TEXT UNIT, SKIP
         L     R14,0&C                 LOAD ADDRESS OF TEXT UNIT
.STHM    STH   R2,S99TULNG             STORE LENGTH OF TEXT UNIT
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE IN TEXT UNIT
         MVI   S99TUKEY+1,&KEY         MOVE IN TEXT UNIT KEY
         AIF   ('&N' EQ '1' OR '&N' EQ '').N1
         LA    R14,&N                  LOAD TEXT UNIT NUMBER
         STH   R14,S99TUNUM             AND STORE IT IN TEXT UNIT
         AGO   .ENDN
.N1      MVI   S99TUNUM+1,1            SET NUMBER FIELD
.ENDN    RCPDINC &LEN
         MEXIT
.BM      RCPTUBFR &KEY,&LEN,&C
         MEXIT
.QM      RCPBTU &KEY,&N,&C
         MEND
         MACRO
         RCPFDDN &DDN
         GBLC &DYNP
         SPACE
***********************************************************************
**        FREE DDNAME TEXT UNIT                                      **
***********************************************************************
         AIF   ('&DDN'(1,1) EQ '''').Q
         AIF   ('&DDN'(K'&DDN,1) EQ '/').B
         RCPSR2
         AIF   ('&DDN'(1,1) EQ '(').R
         L     R14,&DDN                LOAD ADDRESS OF DDNAME
         LH    R2,&DDN+4               LOAD LENGTH OF DDNAME
         AGO   .STH
.R       L     R14,0&DDN               LOAD ADDRESS OF DDNAME
         LH    R2,4&DDN                LOAD LENGTH OF DDNAME
.STH     STH   R2,S99TULNG             STORE DDNAME LENGTH
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE DDNAME
         MVI   S99TUKEY+1,DUNDDNAM     MOVE IN DDNAME KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         RCPDINC 14
         MEXIT
.Q       RCPBTU DUNDDNAM,1,&DDN
         MEXIT
.B       RCPTUBFR DUNDDNAM,14,&DDN
         MEND
*
*
* ENTER HERE AND PERFORM STANDARD REGISTER SAVE AREA HOUSEKEEPING.
         SPACE
VTOCEXCP VTCENTER 12,8                 USE THE PROVIDED SAVEAREA   008G
         USING VTOCWORK,R13   SET ADDRESSABILITY FOR WORK AREA
         LR    R11,R1                  SAVE PARAMETER REGISTER
         USING VTOCOM,R11              SET ADDRESSABILITY
*
*        POINT TO THE DCB FOR LATER REFERENCES
*
         LA    RDCB,VTOCDCB   POINT TO IT
         USING IHADCB,RDCB    SET ADDRESSABILITY
         SPACE
* SELECT MODE FROM CONTENTS AT ADDRESS IN REGISTER 1.
         SPACE
         SR    RWA,RWA                 CLEAR THE REGISTER
         IC    RWA,VTCEFUNC            GET CALL MODE
         SLL   RWA,2                   MODE TIMES 4
         B     *+4(RWA)                BRANCH ON MODE
         SPACE
         B     GETDSB                  MODE 0, GET A DSCB
         B     OPEN                    MODE 1, OPEN A NEW VTOC
         B     CLOSE                   MODE 2, CLOSE
         B     RETURN0                 MODE 3 NOT DEFINED, NO OP
         SPACE 3
***********
* RETURNS *
***********
         SPACE
RETURN0  SR    R15,R15                 CLEAR THE RETURN CODE
RETURN   VTCLEAVE EQ                   EXIT W/THE CURRENT RET CODE.008G
         EJECT
*********************
* MODE 0 - GET DSCB *
*********************
         SPACE
* IF END-OF-FILE WAS REACHED, RETURN AT ONCE.
         SPACE
GETDSB   LA    R15,4                   SET THE RETURN CODE, IN CASE
         TM    MODESW,EOFSW            TEST END-OF-FILE BIT
         BO    RETURN                  RETURN CODE 4 IF ON
         SPACE
* IF CHANNEL PROGRAM HAS BEEN STARTED, GO TO CHECK IT.  OTHERWISE,
* ASSUME THERE IS AT LEAST ONE FULL BUFFER.
         SPACE
         TM    MODESW,XCPRUN           TEST IF EXCP ISSUED
         BO    XCPTEST                 BRANCH IF SO
         SPACE
* SET BUFFER ADDRESS TO NEXT DSCB AND TEST IF LAST ON TRACK.  IF NOT,
* EXIT WITH ITS ADDRESS IN R1.
         SPACE
         L     RWA,DSCBADR             LOAD BUFFER POINTER
         LA    RWA,148(RWA)            ADVANCE TO NEXT DSCB
NDXSTORE ST    RWA,DSCBADR             STORE UPDATED POINTER
         C     RWA,DSCBLIM             TEST IF LAST DSCB IN BUFFER
         BNL   LASTDSCB                BRANCH IF SO
         LR    R1,RWA                  PASS ADDRESS TO USER
GETOUT   ST    R1,DSCBADDR             STORE IT FOR THE CALLER
         TM    MODESW,RDERR            TEST IF ERROR ON THIS TRACK
         BZ    RETURN0                 RETURN CODE 0 IF NOT
         LA    R15,8                   SET THE RETURN CODE
         B     RETURN                  RETURN CODE 8 IF ERROR
         SPACE
* IF THIS IS THE LAST DSCB, MOVE IT TO THE INTERNAL BUFFER AND START
* READING THE NEXT TRACK.
         SPACE
LASTDSCB MVC   BUFF(148),0(RWA)        MOVE LAST DSCB
         L     RWB,TTRN                LOAD RELATIVE TRACK NUMBER
         AL    RWB,=X'00010000'        INCREMENT TO NEXT TRACK
         ST    RWB,TTRN
         BAL   RRET,EXCP               START CHANNEL PROGRAM
         LA    R1,BUFF                 LOAD DSCB ADDRESS FOR CALLER
         B     GETOUT                  TO RETURN
         EJECT
* WAIT FOR CHANNEL PROGRAM COMPLETION AND TEST THE OUTCOME.
         SPACE
XCPTEST  WAIT  ECB=VTOCECB
         SPACE
         NI    MODESW,X'FF'-XCPRUN     TURN EXCP STARTED BIT OFF
         CLI   VTOCECB,X'7F'           TEST COMPLETION CODE
         BNE   PERMERR                 BRANCH IF ERROR
SETDSCBA L     RWA,DSCBSTRT            SET BUFFER POINTER TO 1ST DSCB
         B     NDXSTORE
         SPACE
* PERMANENT ERROR FOR THIS TRACK.  ZERO THE DSCB'S AND FILL IN THE
* CCHHR PORTIONS OF THE COUNT AREAS.
         SPACE
PERMERR  OI    MODESW,RDERR            SIGNAL READ ERROR
         NI    IOBFLAG1,X'FB'          TURN OFF BIT 5 OF IOB FLAG
         NI    DCBIFLGS,X'3F'          TURN OFF BITS 0 AND 1
         L     RWA,DSCBSTRT            LOAD ADDRESS OF FIRST DSCB
         LA    RWB,1                   LOAD RECORD NUMBER
         SPACE
DSCBELUP XC    0(148,RWA),0(RWA)       ZERO DSCB BUFFER
         MVC   0(4,RWA),IOBSEEK+3      INSERT CCHH IN COUNT FIELD
         STC   RWB,4(RWA)              INSERT R IN COUNT FIELD
         LA    RWA,148(RWA)            POINT TO NEXT BUFFER
         LA    RWB,1(RWB)              INCREMENT RECORD NUMBER
         C     RWA,DSCBLIM             TEST FOR LAST BUFFER
         BNH   DSCBELUP
         MVC   MSGTEXT1,TRACKERR                                   007G
         MVC   MSGTEXT1+15(6),VOLID     MOVE VOLSER.               007G
         VTOCMSG MSGTEXT1               ISSUE THE MESSAGE          007G
         B     SETDSCBA                BRANCH TO RESET BUFFER POINTER
         EJECT
*****************
* MODE 1 - OPEN *
*****************
         SPACE
* ENTER WITH A DDNAME IN SECOND PARAMETER POSITION.  PERFORM CLOSE
* SUBROUTINE FIRST TO BE SURE EVERYTHING IS INITIALIZED.
         SPACE
OPEN     DS    0H
         BAL   RRET,CLOSESUB           CALL CLOSE SUBROUTINE
         SPACE
*
*        INITIALIZE THE DATA AREAS
*
*        FIRST THE DCB
         MVC   VTOCDCB(DCBLEN),VTOCDCBM  SET UP THE DCB
*
*        SET UP THE JFCB LISTS
*
         LA    R1,JEXLST      POINT TO THE EXIT LIST
         STCM  R1,B'0111',DCBEXLSA  PUT IT INTO THE DCB
         LA    R1,JFCBAREA    POINT TO THE JFCB AREA
         ST    R1,JEXLST      AND PUT THAT INTO THE EXIT LIST
         MVI   JEXLST,X'87'   END OF LIST, JFCB EXIT
         MVI   OPENLIST,X'80' END OF THE OPEN LIST TOO
*        INITIALIZE THE IOB
         MVC   VTOCIOB(IOBCONL),IOBCONST START IT OUT
         LA    R1,VTOCECB     GET THE ECB ADDRESS
         ST    R1,IOBECB      AND STORE IT INTO THE IOB
         ST    RDCB,IOBDCB    STORE THE DCB ADDRESS INTO THE IOB
*        INITIALIZE THE CAMLST
         MVC   DSCBFMT4(4),DSCBCON SET UP THE FIRST WORD
         LA    R1,IOBSEEK+3   SEEK ADDRESS
         ST    R1,DSCBFMT4+4  INTO THE CAMLST
         LA    R1,VOLID       VOLUME SERIAL NUMBER
         ST    R1,DSCBFMT4+8  INTO THE CAMLST
         LA    R1,FMT4        DSCB AREA
         ST    R1,DSCBFMT4+12 INTO THE CAMLST
*
*        ALLOCATE THE VTOC OF THE CHOSEN PACK
*
         LA    R1,VOLID       POINT TO THE VOLUME SERIAL
         ST    R1,VOLADDR     SAVE THE ADDRESS
         LA    R1,6           ALSO GET THE LENGTH
         STH   R1,VOLLEN      AND SAVE IT FOR DYNAMIC ALLOCATION MACRO
         LA    R1,3           GET L(UNIT TYPE).                    006G
         MVC   MSGTEXT2+8(3),ADDR  MOVE IN THE UNIT ADDRESS.       006G
MOVEDDA  CLC   ADDR(3),=XL3'00'  WAS VOLUME MOUNTED?               005G
         BNE   ALLOVTOC          YES, USE IT'S ADDRESS.            006G
         LA    R1,5           GET L(UNIT TYPE).                    005G
         MVC   MSGTEXT2+8(5),=CL5'3330V'   NO, ASSUME VUA UNIT.    005G
ALLOVTOC STH   R1,MSGTEXT2+4     SAVE L(UNIT TYPE).                005G
         LA    R1,MSGTEXT2+8     GET A(UNIT TYPE).                 005G
         ST    R1,MSGTEXT2       SAVE A(UNIT TYPE).                005G
         VTCALLOC DSN=VTOCNM,VOL=VOLADDR,UNIT=MSGTEXT2,DISP=SHR,       X
               DDNTO=DCBDDNAM,ERROR=S99FAIL                    005G008G
         OI    MODESW,ALLOCSW          SET ALLOCATE FLAG ON
         SPACE
* OPEN THE VTOC.
         SPACE
*
*        FIRST READ THE JFCB TO SWITCH THE DSNAME TO HEX 04'S
*
         RDJFCB ((RDCB)),MF=(E,OPENLIST)  READ THE JFCB
         LTR   R15,R15        TEST THE RETURN CODE
         BNZ   ERRJFCB        BAD NEWS
         LA    R1,JFCBAREA    POINT TO THE JFCB
         USING JFCB,R1        SET UP ADDRESSABILITY
         MVI   JFCBDSNM,X'04' PUT IN THE FIRST ONE
         MVC   JFCBDSNM+1(L'JFCBDSNM-1),JFCBDSNM  PROPAGATE IT
         OI    JFCBTSDM,JFCNWRIT  DON'T REWRITE IT
         DROP  R1
         OPEN  ((RDCB),(INPUT)),MF=(E,OPENLIST),TYPE=J  OPEN THE VTOC
         TM    DCBOFLGS,OPENBIT        TEST IF OPEN WORKED
         BZ    OPENERR                 ERROR IF OPEN FAILED
         SPACE
* ISSUE AN OBTAIN FOR THE FIRST DSCB ON THE VTOC ( FORMAT 4 )
D3       STM   R2,R13,EXCPSAVE         SAVE OUR REGS
         LA    R3,EXCPSAVE    POINT TO THE REGISTER SAVE AREA
         ICM   R0,B'1111',=X'00000100' FIRST DSCB
         L     R1,DCBDEBAD             DEB ADDRESS
         LA    R2,IOBSEEK              SAVE ADDRESS OF CCHHR
         L     R15,CVT                 GET ADDRESS OF CVT
         L     R15,CVTPCNVT(R15)       GET ADDRESS OF CONVERT ROUTINE
         BALR  R14,R15                 GO TO CONVERT ROUTINE
         LM    R2,R13,0(R3)            GET MY REGS BACK
         OBTAIN DSCBFMT4               GET FORMAT 4 DSCB
         LTR   R15,R15                 DID WE GET IT
         BNZ   OBTERR                  NO - THEN ERROR, KEEP R15
         CLI   DS4IDFMT,X'F4'          MAKE SURE WE HAVE FORMAT 4
         BNE   NOTFMT4                 NO - THEN ERROR
         IC    R15,DS4DEVDT            GET NUMBER OF DSCBS PER TRACK
         ST    R15,NDSCBS              SAVE THE NUMBER OF DSCBS
         OC    NDSCBS,NDSCBS           MAKE SURE NOT ZERO
         BZ    DSCBNUM0                YES - GO TELL CALLER
*
* OBTAIN CORE FOR CHANNEL PROGRAM AND DSCB BUFFERS.
         SPACE
         LA    R0,156                  CORE FOR ONE DSCB AND ITS CCW
         MH    R0,NDSCBS+2             TIMES NUMBER PER TRACK
         AH    R0,=H'15'               PLUS 1 CCW AND ROUNDING
         N     R0,=X'FFFFFFF8'         ROUND TO DOUBLE-WORD MULTIPLE
         ST    R0,CBSIZE               SAVE SIZE OF GOTTEN CORE
         GETMAIN  R,LV=(0)             GET TRACK BUFFERS
         ST    R1,CBADDR               SAVE ADDRESS OF GOTTEN CORE
         OI    MODESW,CBGOT            INDICATE CORE GOTTEN
         SPACE
* GENERATE CHANNEL PROGRAM.  IT CONSISTS OF A 'READ R0' ORDER WITH
* THE SKIP FLAG ON, FOLLOWED BY A 'READ COUNT-KEY-AND-DATA' ORDER FOR
* EACH DSCB.
         SPACE
         L     RWA,NDSCBS              NUMBER OF DSCB'S
         SLL   RWA,3                   TIMES   8
         LA    RWA,8(RWA,R1)           PLUS 8 AND BASE = 1ST BUFFER ADD
         ST    RWA,DSCBSTRT            SAVE ADDRESS OF FIRST BUFFER
         SPACE
         ST    R1,IOBSTART             ADDRESS OF CHANNEL PROGRAM
         MVC   0(8,R1),INITCCW         INSERT FIRST CCW
         LA    RWB,8(R1)               PLACE FOR NEXT CCW
         LA    RWC,1                   BUFFER COUNTER
         SPACE
CCWLOOP  MVC   0(8,RWB),READCCW        INSERT READ CCW FOR ONE DSCB
         ST    RWA,0(RWB)              SET ITS BUFFER ADDRESS
         MVI   0(RWB),READCKD          RESTORE COMMAND CODE
         C     RWC,NDSCBS              TEST BUFFER COUNTER
         BNL   LASTCCW                 BRANCH IF LAST BUFFER
         LA    RWB,8(RWB)              INCREMENT CCW ADDRESS
         LA    RWA,148(RWA)            INCREMENT BUFFER ADDRESS
         LA    RWC,1(RWC)              INCREMENT BUFFER COUNTER
         B     CCWLOOP                 DO NEXT BUFFER
         SPACE
LASTCCW  NI    4(RWB),X'FF'-CC         TURN OFF COMMAND CHAIN BIT
         ST    RWA,DSCBLIM             SAVE ADDRESS OF LAST DSCB BUFFER
         SPACE
* SET OTHER THINGS AND START PROGRAM TO FILL BUFFER.
         SPACE
         SR    R0,R0
         ST    R0,TTRN                 SET RELATIVE TRACK NUMBER TO 0
         NI    MODESW,X'FF'-XCPRUN-RDERR-EOFSW   SET FLAGS OFF
         BAL   RRET,EXCP               START CHANNEL PROGRAM
         B     RETURN0                 INDICATE SUCCESSFUL OPEN
         EJECT
******************
* MODE 2 - CLOSE *
******************
         SPACE
CLOSE    BAL   RRET,CLOSESUB           CALL CLOSED CLOSE SUBROUTINE
         B     RETURN0
         SPACE 2
* IF THE CHANNEL PROGRAM IS RUNNING, WAIT FOR IT BEFORE TAKING FURTHER
* ACTION.
         SPACE
CLOSESUB DS    0H
         TM    MODESW,XCPRUN           TEST IF CHANNEL PROGRAM RUNNING
         BZ    NOEXCP                  BRANCH IF NOT
         WAIT  ECB=VTOCECB             WAIT UNTIL COMPLETE
         NI    MODESW,X'FF'-XCPRUN     TURN RUNNING SWITCH OFF
NOEXCP   DS    0H
         SPACE
* CLOSE THE DCB.
         SPACE
         TM    DCBOFLGS,OPENBIT        TEST IF DCB OPEN
         BZ    NOCLOSE                 BRANCH IF NOT
         CLOSE ((RDCB)),MF=(E,OPENLIST)   CLOSE THE VTOC
NOCLOSE  DS    0H
         SPACE
* FREE UP THE DDNAME AND VOLUME
         SPACE
         TM    MODESW,ALLOCSW          DID WE ALLOCATE A DEVICE
         BNO   NOALLOC                 NO  - THEN NOTHING TO FREEUP
         LA    R1,DCBDDNAM   POINT TO THE DDNAME
         ST    R1,DDNPDL     SAVE IT FOR FREE
         LA    R1,8          GET THE DDNAME LENGTH
         STH   R1,DDNPDL+4   SAVE IT FOR FREE
         VTCFREE  UNALC,DDN=DDNPDL,ERROR=S99FAIL  FREE THE DDNAME 008G
         NI    MODESW,X'FF'-ALLOCSW    TURN OFF ALLOCATE SW
         SPACE
NOALLOC  DS    0H
         SPACE
* RELEASE CORE OBTAINED FOR DSCB BUFFERS.
         SPACE
         TM    MODESW,CBGOT            TEST IF CORE GOTTEN
         BZ    NOFREE                  BRANCH IF NOT
         LM    R0,R1,CBSIZE            LOAD SIZE AND LOCATION
         FREEMAIN  R,LV=(0),A=(1)      FREE CORE
         NI    MODESW,X'FF'-CBGOT      SET CORE GOTTEN BIT OFF
NOFREE   DS    0H
         SPACE
         NI    MODESW,X'FF'-RDERR      CLEAR ERROR SWITCH
         BR    RRET
         EJECT
****************
* EXCP ROUTINE *
****************
         SPACE
* CONVERT RELATIVE TRACK ADDRESS IN 'TTRN' TO ABSOLUTE SEEK ADDRESS IN
* 'IOBSEEK', USING SUPERVISOR CONVERSION ROUTINE.
         SPACE
EXCP     DS    0H
         STM   R2,R13,EXCPSAVE         SAVE IMPORTANT REGISTERS
         LA    R3,EXCPSAVE             SAVE REGS FOR RESTORING AFTER CL
         L     R0,TTRN                 LOAD RELATIVE TRACK NUMBER
         L     R1,DCBDEBAD             LOAD DEB ADDRESS
         LA    R2,IOBSEEK              LOAD ADDR TO RECEIVE MBBCCHHR
         L     R15,CVT                 LOAD CVT ADDRESS
         L     R15,CVTPCNVT(R15)       LOAD ADDR OF CONVERT ROUTINE
         BALR  R14,R15                 CONVERT TTRN TO MBBCCHHR
*                                      THAT CLOBBERED BASE REG
         LM    R2,R13,0(R3)            RESTORE REGISTERS
         LTR   R15,R15                 TEST IF EXTENT VIOLATED (RC=4)
         BNZ   SETEOF                  IF SO, MEANS END-OF-FILE
         CLC   DS4HPCHR,IOBSEEK+3      CHECK FOR THE LAST FMT1
         BL    SETEOF                  IF SO, PRETEND END-OF-FILE
         SPACE
* ZERO ECB AND START CHANNEL PROGRAM.
         SPACE
         SR    R0,R0
         ST    R0,VTOCECB              CLEAR ECB
         NI    MODESW,X'FF'-RDERR      RESET ERROR SWITCH
         EXCP  VTOCIOB                 START CHANNEL PROGRAM
         OI    MODESW,XCPRUN           SET 'RUNNING' FLAG
         BR    RRET
         SPACE
* WHEN EXTENT IS VIOLATED, SET END-FILE AND EXIT VIA CLOSE ROUTINE.
         SPACE
SETEOF   OI    MODESW,EOFSW            SET END-OF-FILE BIT
         B     CLOSESUB                EXIT VIA CLOSE SUBROUTINE
         EJECT
********************************
* DAIRFAIL ROUTINE             *
********************************
S99FAIL  LR    RRCODE,R15     SAVE THE RETURN CODE                 003G
         VTCS99NG MF=(E,S99FLIST,S99FLEN)  ISSUE THE APPROP. MSG   008G
         LR    R15,RRCODE     RELOAD THE RETURN CODE
         B     RETURN         AND THEN EXIT
         SPACE 3
*
*        VARIOUS OTHER ERROR ROUTINES
*
OPENERR  MVC   MSGTEXT1,OPENERRM                                   004G
         MVC   MSGTEXT1+15(6),VOLID     MOVE VOLSER.               004G
         VTOCMSG MSGTEXT1               ISSUE THE MESSAGE          004G
         B     ERRET                     THEN RETURN
OBTERR   MVC   MSGTEXT1,OBTERRM                                    004G
         MVC   MSGTEXT1+15(6),VOLID     MOVE VOLSER.               004G
         VTOCMSG MSGTEXT1               ISSUE THE MESSAGE          004G
         B     ERRET                     THEN RETURN
NOTFMT4  MVC   MSGTEXT1,NOTFMT4M                                   004G
         MVC   MSGTEXT1+15(6),VOLID     MOVE VOLSER.               004G
         VTOCMSG MSGTEXT1               ISSUE THE MESSAGE          004G
         B     ERRET                     THEN RETURN
DSCBNUM0 MVC   MSGTEXT1,DSCBNUM0                                   004G
         MVC   MSGTEXT1+15(6),VOLID     MOVE VOLSER.               004G
         VTOCMSG MSGTEXT1               ISSUE THE MESSAGE          004G
         B     ERRET                     THEN RETURN
ERRJFCB  MVC   MSGTEXT1,ERRJFCBM                                   004G
         MVC   MSGTEXT1+15(6),VOLID     MOVE VOLSER.               004G
         VTOCMSG MSGTEXT1               ISSUE THE MESSAGE          004G
         B     ERRET                     THEN RETURN               004G
*
ERRET    LA    R15,8          SET AN ERROR RETURN CODE
         B     RETURN         THEN EXIT
*
         EJECT
********************************
* CONSTANTS, VARIABLES, ETC... *
********************************
         SPACE
*        ERROR MESSAGES
*
OPENERRM VTCMSG ' VTOCEXCP -VVVVVV- ERROR IN OPENING VTOC '   002G 004G
OBTERRM  VTCMSG ' VTOCEXCP -VVVVVV- ERROR IN OBTAIN '         002G 004G
NOTFMT4M VTCMSG ' VTOCEXCP -VVVVVV- FORMAT 4 DSCB WAS NOT FIRST'   004G
DSCBNUMM VTCMSG ' VTOCEXCP -VVVVVV- FORMAT 4 DSCB HAS DSCB S/TRK =0'
TRACKERR VTCMSG ' VTOCEXCP -VVVVVV- A READ ERROR OCCURRED ON VTOC' 004G
ERRJFCBM VTCMSG ' VTOCEXCP -VVVVVV- A RDJFCB ERROR OCCURRED ' 002G 004G
         SPACE
INITCCW  CCW   READR0,0,CC+SLI+SKIP,8
READCCW  CCW   READCKD,0,CC,148
         SPACE
DSCBCON  CAMLST SEEK,0,0,0   FILLED IN WITH IOBSEEK+3, VOLID, FMT4
         EJECT
* DATA CONTROL BLOCK
VTOCDCBM DCB   DDNAME=VTOCDD,MACRF=(E),EXLST=1
DCBLEN   EQU   *-VTOCDCBM
         SPACE
* IOB FOR CHANNEL PROGRAM
         SPACE
IOBCONST DS    0D
         DC    X'42000000'     COMMAND CHAIN, NOT RELATED
         DC    A(0)            ECB ADDRESS
         DC    2F'0'
         DC    A(0)            CHANNEL PROGRAM BEGINNING
         DC    A(0)            DCB ADDRESS
         DC    X'03000000'
         DC    F'0'
         DC    D'0'            INITIAL SEEK ADDRESS
IOBCONL  EQU   *-IOBCONST
* VTOC NAME FOR ALLOCATION
VTOCNM   DC    A(VTOCNAME)
         DC    Y(12)
VTOCNAME DC    CL12'FORMAT4.DSCB'   DATA SET NAME FOR VTOC
*
*
         LTORG
         EJECT
* SECTION DEFINITION AND REGISTER ASSIGNMENTS;
         SPACE 2
RWA      EQU   2
RWB      EQU   3
RWC      EQU   4
RDCB     EQU   8              DCB POINTER
RRCODE   EQU   10              RETURN CODE REGISTER
RRET     EQU   9               LOCAL SUBROUTINE EXIT REGISTER
         SPACE 3
* TAGS FOR CHANNEL COMMANDS AND FLAG BITS:
         SPACE
READR0   EQU   X'16'           READ RECORD 0
READCKD  EQU   X'1E'           READ COUNT, KEY, AND DATA
         SPACE
CC       EQU   X'40'           COMMAND CHAIN FLAG
SLI      EQU   X'20'           SUPPRESS LENGTH INDICATION FLAG
SKIP     EQU   X'10'           SKIP DATA TRANSFER FLAG
         SPACE 3
* COMMUNICATION VECTOR TABLE (CVT) DEFINITIONS:
         SPACE
CVT      EQU   16              LOCATION OF CVT BASE ADDRESS
CVTPCNVT EQU   28              OFFSET TO CONVERT ROUTINE ADDRESS
         EJECT
*
*        AREA USED BY VTOCREAD, PASSED VIA R13
*
VTOCWORK DSECT
         DS    18F             SAVE AREA
         SPACE
EXCPSAVE DS    18F             INTERNAL SAVE AREA
CBSIZE   DS    2F              SIZE AND LOCATION OF GOTTEN CORE
CBADDR   EQU   CBSIZE+4
NDSCBS   DS    F               NUMBER OF DSCB'S PER TRACK
DSCBSTRT DS    F               ADDRESS OF 1ST DSCB BUFFER
DSCBLIM  DS    F               ADDRESS OF LAST DSCB BUFFER
DSCBADR  DS    F               ADDRESS OF CURRENT DSCB
TTRN     DS    F               RELATIVE TRACK NUMBER
VOLADDR  DS    A               FAKE PDL FOR ALLOC MACRO - ADDRESS
VOLLEN   DS    H                       AND LENGTH OF VOLID
DDNPDL   DS    2F            SPACE FOR DDNAME PDL
         SPACE
* MODE SWITCH AND BIT DEFINITIONS
         SPACE
MODESW   DC    X'00'
CBGOT    EQU   X'80'           CORE GOTTEN FOR BUFFER
XCPRUN   EQU   X'40'           CHANNEL PROGRAM STARTED BUT NOT CHECKED
RDERR    EQU   X'20'           PERMANENT I/O ERROR
EOFSW    EQU   X'10'           END-OF-FILE SENSED
ALLOCSW  EQU   X'08'           ALLOCATE VOLUME FLAG
         SPACE
VTOCDCB  DCB   DDNAME=VTOCDD,MACRF=(E),EXLST=1
         SPACE
OPENBIT  EQU   X'10'
OPENLIST DS    2F
         SPACE
* IOB FOR CHANNEL PROGRAM
         SPACE
VTOCIOB  DS    0D
IOBFLAG1 DC    X'42000000'     COMMAND CHAIN, NOT RELATED
IOBECB   DC    A(VTOCECB)
         DC    2F'0'
IOBSTART DC    A(0)            CHANNEL PROGRAM BEGINNING
IOBDCB   DC    A(VTOCDCB)
         DC    X'03000000'
         DC    F'0'
IOBSEEK  DC    D'0'            INITIAL SEEK ADDRESS
         SPACE
* EVENT CONTROL BLOCK FOR CHANNEL PROGRAM:
         SPACE
VTOCECB  DC    F'0'            EVENT CONTROL BLOCK
         SPACE 3
* INTERNAL BUFFER FOR LAST DSCB
BUFF     DS    XL148
         SPACE 2
DSCBFMT4 CAMLST SEEK,IOBSEEK+3,VOLID,FMT4
         SPACE
*   WORK AREA FOR DYNAMIC ALLOCATION
*                 COMMENT COUDN'T BE PUT ON FOLLOWING VTCDYNSP     008G
         VTCDYNSP
*                 COMMENT COUDN'T BE PUT ON PRECEEDING VTCDYNSP    008G
S99FLIST DS    XL(S99FLEN)
         SPACE
*
*        JFCB EXIT LIST AND AREA
*
JEXLST   DS    F
JFCBAREA DS    XL176
         DS    0D
VTOCWLEN EQU   *-VTOCWORK
         SPACE 2
         VTCCOM                                                    008G
         SPACE 2
         IEFZB4D0
         SPACE 2
         IEFZB4D2
         SPACE 2
         DCBD  DEVD=DA,DSORG=PS
         SPACE 2
JFCB     DSECT
         IEFJFCBN
         END
